name: 🚀 SwiftParser-OSS CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run linting
      run: npm run lint
      
    - name: 🧪 Run tests with coverage
      run: npm run test:ci
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: 📈 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.node-version }}
        path: coverage/

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run security audit
      run: npm audit --audit-level=high
      
    - name: 🛡️ Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build package
      run: npm run build
      
    - name: 📦 Pack for distribution
      run: npm pack
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: npm-package
        path: '*.tgz'

  publish:
    name: 📢 Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Final test before publish
      run: npm run test:ci
      
    - name: 🏗️ Build package
      run: npm run build
      
    - name: 📢 Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: 🎉 Create GitHub release summary
      run: |
        echo "🚀 SwiftParser-OSS v${{ github.event.release.tag_name }} published to NPM!" >> $GITHUB_STEP_SUMMARY
        echo "📦 Install: \`npm install @gridworks-tech/swiftparser-oss\`" >> $GITHUB_STEP_SUMMARY
        echo "📖 Documentation: https://github.com/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: ⚡ Run performance benchmarks
      run: |
        echo "🏃‍♂️ Running performance tests..."
        npm test -- --testPathPattern=performance
        
    - name: 📊 Performance Report
      run: |
        echo "⚡ Performance Tests Completed" >> $GITHUB_STEP_SUMMARY
        echo "🎯 All benchmarks within acceptable thresholds" >> $GITHUB_STEP_SUMMARY